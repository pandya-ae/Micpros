     1                                  %INCLUDE "winAPI.inc"		;;Declare external procedure {winapi}
     1                              <1> extern ExitProcess
     2                              <1> extern AllocConsole 
     3                              <1> extern FreeConsole 
     4                              <1> extern SetConsoleTitleA 
     5                              <1> extern Sleep 
     6                              <1> extern GetStdHandle
     7                              <1> extern ReadFile
     8                              <1> extern WriteFile
     9                              <1> EXTERN MessageBoxA	
    10                              <1> 
    11                              <1> import ExitProcess		kernel32.dll
    12                              <1> import AllocConsole		kernel32.dll 
    13                              <1> import FreeConsole		kernel32.dll 
    14                              <1> import SetConsoleTitleA	kernel32.dll 
    15                              <1> import Sleep 			kernel32.dll
    16                              <1> import GetStdHandle 	kernel32.dll
    17                              <1> import ReadFile			kernel32.dll
    18                              <1> import WriteFile		kernel32.dll
    19                              <1> IMPORT MessageBoxA 		user32.dll
     2                                  %INCLUDE "Console1.mac"		;;Macro definition
     1                              <1> %macro NewConsole 3
     2                              <1> 	
     3                              <1> 	call [AllocConsole] 
     4                              <1> 
     5                              <1> 	push dword %1 
     6                              <1> 	call [SetConsoleTitleA] 
     7                              <1> 
     8                              <1> 	push dword -11 				
     9                              <1> 	call [GetStdHandle] 
    10                              <1> 	mov dword [%2], eax 
    11                              <1> 
    12                              <1> 	push dword -10				 
    13                              <1> 	call [GetStdHandle] 
    14                              <1> 	mov dword [%3], eax 
    15                              <1> 
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro QuitConsole 0
    19                              <1> 	call [FreeConsole] 
    20                              <1> 	xor eax, eax 
    21                              <1> 	push eax 
    22                              <1> 	call [ExitProcess]
    23                              <1> %endmacro
    24                              <1> 
    25                              <1> %macro Wait 1
    26                              <1> 	push dword %1*1000 		;; delay %1/1000 second 
    27                              <1> 	call [Sleep] 
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro DisplayText 4
    31                              <1> 	push dword 0 				
    32                              <1> 	push dword %4				
    33                              <1> 	push dword [%3] 			
    34                              <1> 	push dword %2				
    35                              <1> 	push dword [%1] 			
    36                              <1> 	call [WriteFile] 
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> %macro GetText 4
    40                              <1> 	push dword 0 		
    41                              <1> 	push dword %4 		
    42                              <1> 	push dword [%3] 	
    43                              <1> 	push dword %2 		
    44                              <1> 	push dword [%1] 	
    45                              <1> 	call [ReadFile] 			
    46                              <1> %endmacro
     3                                  
     4                                  SEGMENT .DATA use32
     5 00000000 54455854204C454E47-     Title   	db "TEXT LENGTH (EXCLUDED SPACE)",0 
     5 00000009 544820284558434C55-
     5 00000012 444544205350414345-
     5 0000001B 2900               
     6                                  
     7 0000001D 0D0A0D0A5752495445-     msg1 		db 13,10,13,10,"WRITE TEXT (Quit Just Enter): ",0
     7 00000026 205445585420285175-
     7 0000002F 6974204A7573742045-
     7 00000038 6E746572293A2000   
     8 00000040 23000000                msg1_len 	dd $-msg1
     9 00000044 0D0A594F5552205445-     msg2 		db 13,10,"YOUR TEXT                   : ",0
     9 0000004D 585420202020202020-
     9 00000056 202020202020202020-
     9 0000005F 2020203A2000       
    10 00000065 21000000                msg2_len 	dd $-msg2
    11 00000069 0D0A54455854204C45-     msg3 		db 13,10,"TEXT LENGTH                 : ",0
    11 00000072 4E4754482020202020-
    11 0000007B 202020202020202020-
    11 00000084 2020203A2000       
    12 0000008A 21000000                msg3_len 	dd $-msg3
    13                                  
    14 0000008E <res 000000FF>          buff		resb 255
    15 0000018D FF000000                buff_len	dd 255
    16                                  
    17 00000191 20202020202000          strhasil	db '      ',0
    18 00000198 06                      str_len		db 6   
    19                                  
    20                                  
    21                                  SEGMENT .BSS  use32
    22 00000000 <res 00000004>          hStdOut		resd 1 
    23 00000004 <res 00000004>          hStdIn		resd 1 
    24 00000008 <res 00000004>          nBytes		resd 1
    25 0000000C <res 00000004>          iBytes		resd 1
    26                                  
    27                                  SEGMENT .CODE use32
    28                                  ..start:
    29                                  
    30                                  NewConsole 	Title, hStdOut, hStdIn
    30                              <1> 
    30 00000000 FF15[00000000]      <1>  call [AllocConsole]
    30                              <1> 
    30 00000006 68[00000000]        <1>  push dword %1
    30 0000000B FF15[00000000]      <1>  call [SetConsoleTitleA]
    30                              <1> 
    30 00000011 6AF5                <1>  push dword -11
    30 00000013 FF15[00000000]      <1>  call [GetStdHandle]
    30 00000019 A3[00000000]        <1>  mov dword [%2], eax
    30                              <1> 
    30 0000001E 6AF6                <1>  push dword -10
    30 00000020 FF15[00000000]      <1>  call [GetStdHandle]
    30 00000026 A3[04000000]        <1>  mov dword [%3], eax
    30                              <1> 
    31                                  
    32                                  Again:
    33                                  DisplayText	hStdOut, msg1, msg1_len, nBytes
    33 0000002B 6A00                <1>  push dword 0
    33 0000002D 68[08000000]        <1>  push dword %4
    33 00000032 FF35[40000000]      <1>  push dword [%3]
    33 00000038 68[1D000000]        <1>  push dword %2
    33 0000003D FF35[00000000]      <1>  push dword [%1]
    33 00000043 FF15[00000000]      <1>  call [WriteFile]
    34                                  GetText		hStdIn, buff, buff_len, iBytes
    34 00000049 6A00                <1>  push dword 0
    34 0000004B 68[0C000000]        <1>  push dword %4
    34 00000050 FF35[8D010000]      <1>  push dword [%3]
    34 00000056 68[8E000000]        <1>  push dword %2
    34 0000005B FF35[04000000]      <1>  push dword [%1]
    34 00000061 FF15[00000000]      <1>  call [ReadFile]
    35                                  
    36 00000067 833D[0C000000]02        CMP dword [iBytes],2    ;; if just Enter (2 char) then Exit
    37 0000006E 0F8482000000            JE  Exitloop
    38                                  
    39                                  DisplayText	hStdOut, msg2, msg2_len, nBytes
    39 00000074 6A00                <1>  push dword 0
    39 00000076 68[08000000]        <1>  push dword %4
    39 0000007B FF35[65000000]      <1>  push dword [%3]
    39 00000081 68[44000000]        <1>  push dword %2
    39 00000086 FF35[00000000]      <1>  push dword [%1]
    39 0000008C FF15[00000000]      <1>  call [WriteFile]
    40                                  DisplayText	hStdOut, buff, iBytes, nBytes
    40 00000092 6A00                <1>  push dword 0
    40 00000094 68[08000000]        <1>  push dword %4
    40 00000099 FF35[0C000000]      <1>  push dword [%3]
    40 0000009F 68[8E000000]        <1>  push dword %2
    40 000000A4 FF35[00000000]      <1>  push dword [%1]
    40 000000AA FF15[00000000]      <1>  call [WriteFile]
    41                                  
    42 000000B0 E851000000              CALL Numeric2Str
    43                                  
    44                                  
    45                                  DisplayText	hStdOut, msg3, msg3_len, nBytes
    45 000000B5 6A00                <1>  push dword 0
    45 000000B7 68[08000000]        <1>  push dword %4
    45 000000BC FF35[8A000000]      <1>  push dword [%3]
    45 000000C2 68[69000000]        <1>  push dword %2
    45 000000C7 FF35[00000000]      <1>  push dword [%1]
    45 000000CD FF15[00000000]      <1>  call [WriteFile]
    46                                  DisplayText	hStdOut, strhasil, str_len, nBytes		; DISPLAY RESULT
    46 000000D3 6A00                <1>  push dword 0
    46 000000D5 68[08000000]        <1>  push dword %4
    46 000000DA FF35[98010000]      <1>  push dword [%3]
    46 000000E0 68[91010000]        <1>  push dword %2
    46 000000E5 FF35[00000000]      <1>  push dword [%1]
    46 000000EB FF15[00000000]      <1>  call [WriteFile]
    47                                  
    48 000000F1 E935FFFFFF              JMP Again
    49                                  
    50                                  Exitloop: 
    51                                     QuitConsole
    51 000000F6 FF15[00000000]      <1>  call [FreeConsole]
    51 000000FC 31C0                <1>  xor eax, eax
    51 000000FE 50                  <1>  push eax
    51 000000FF FF15[00000000]      <1>  call [ExitProcess]
    52                                  	
    53 00000105 C3                      RET
    54                                  
    55                                  ; CONVERT Numeric (iBytes) TO STRING (strhasil) 
    56                                  ;-------------------------------------------------------------------------------------
    57                                  Numeric2Str: 
    58 00000106 BB[8E000000]               mov ebx, dword buff 
    59 0000010B B900000000                 mov ecx,0
    60                                     
    61                                     check:
    62 00000110 8A03                       mov al,byte[ebx]
    63 00000112 3C20                       cmp al,32
    64 00000114 7501                       jne check2
    65 00000116 41                         inc ecx 
    66                                     
    67                                     
    68                                     check2:
    69 00000117 43                         inc ebx
    70 00000118 3C0D                       cmp al,13
    71 0000011A 75F4                       jne check
    72                                  
    73 0000011C BB[91010000]            	mov ebx, strhasil	;; hasil konversi disimpan di strhasil  
    74                                   
    75                                   loop1:				
    76 00000121 43                      	inc ebx				;; ebx digunakan sebagai pointer ke strhasil
    77 00000122 803B00                  	cmp byte[ebx],0		;; diposisikan pada akhir string strhasil 
    78 00000125 75FA                    	jne loop1		
    79 00000127 4B                      	dec ebx
    80                                          		
    81                                  				
    82 00000128 A1[0C000000]            	mov eax, [iBytes]	;; panjang string yang dibaca termasuk cr,lf
    83 0000012D 83E802                  	sub eax, 2			;; maka panjangnya dikurangi cr,lf (2)
    84 00000130 66BE0A00                	mov si,10	
    85 00000134 29C8                    	sub eax,ecx
    86                                   loop2:				
    87 00000136 31D2                    	xor edx, edx		;; edx di-nolkan untuk menampung sisa bagi
    88 00000138 66F7F6                  	div si				;; dilakukan pembagian 10 berulang
    89 0000013B 80C230                  	add dl, '0'        	;; sisa bagi pada edx (dl) di ubah ke character
    90 0000013E 8813                    	mov [ebx], dl		;; simpan ke strhasil dari belakang ke depan
    91 00000140 4B                      	dec ebx				;; majukan pointer
    92 00000141 09C0                    	or  eax,eax			;; test apakah yang dibagi sudah nol
    93 00000143 75F1                    	jnz loop2 			;; selesai perulangan jika yang dibagi sdh nol   
    94                                      
    95                                   stop:
    96 00000145 C3                      ret
    97                                  
